# =============================================================================
# Tyra MCP Memory Server - Production Override Configuration
# =============================================================================
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # =============================================================================
  # Production Memory Server
  # =============================================================================
  memory-server:
    build:
      target: production
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - API_RELOAD=false
      - API_ENABLE_DOCS=false
      - WORKERS=8
    volumes:
      - memory_data:/app/data
      - memory_logs:/app/logs:rw
      - memory_cache:/app/cache:rw
      - ./config:/app/config:ro
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # =============================================================================
  # Production MCP Server
  # =============================================================================
  mcp-server:
    build:
      target: mcp-server
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # =============================================================================
  # Production Database with Optimizations
  # =============================================================================
  postgres:
    environment:
      - POSTGRES_DB=tyra_memory_prod
    command:
      - postgres
      - -c
      - shared_preload_libraries=vector
      - -c
      - max_connections=300
      - -c
      - shared_buffers=512MB
      - -c
      - effective_cache_size=2GB
      - -c
      - maintenance_work_mem=128MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=32MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=300
      - -c
      - work_mem=8MB
      - -c
      - min_wal_size=2GB
      - -c
      - max_wal_size=8GB
      - -c
      - max_worker_processes=8
      - -c
      - max_parallel_workers_per_gather=4
      - -c
      - max_parallel_workers=8
      - -c
      - log_min_duration_statement=1000
      - -c
      - log_checkpoints=on
      - -c
      - log_connections=on
      - -c
      - log_disconnections=on
      - -c
      - log_lock_waits=on
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"

  # =============================================================================
  # Production Redis with Optimizations
  # =============================================================================
  redis:
    command:
      - redis-server
      - --maxmemory
      - 2gb
      - --maxmemory-policy
      - allkeys-lru
      - --save
      - 900 1
      - --save
      - 300 10
      - --save
      - 60 10000
      - --appendonly
      - "yes"
      - --appendfsync
      - everysec
      - --auto-aof-rewrite-percentage
      - "100"
      - --auto-aof-rewrite-min-size
      - "64mb"
      - --tcp-keepalive
      - "300"
      - --timeout
      - "0"
      - --tcp-backlog
      - "511"
      - --databases
      - "16"
    deploy:
      resources:
        limits:
          memory: 2.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # =============================================================================
  # Production Neo4j with Optimizations
  # =============================================================================
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: tyra-neo4j-prod
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-neo4j}
      NEO4J_dbms_default__database: ${NEO4J_DATABASE:-neo4j}
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_dbms_connector_bolt_thread__pool__min__size: 8
      NEO4J_dbms_connector_bolt_thread__pool__max__size: 16
      NEO4J_dbms_transaction_timeout: 600s
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
      - neo4j_plugins:/plugins
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # =============================================================================
  # Load Balancer (Production)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: tyra-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - memory-server
    networks:
      - tyra-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # =============================================================================
  # Log Rotation Service
  # =============================================================================
  logrotate:
    image: alpine:latest
    container_name: tyra-logrotate
    restart: unless-stopped
    volumes:
      - memory_logs:/logs/memory:rw
      - mcp_logs:/logs/mcp:rw
      - nginx_logs:/logs/nginx:rw
      - ./scripts/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        crond -f -d 8 &&
        echo '0 2 * * * /usr/sbin/logrotate /etc/logrotate.conf' | crontab - &&
        while true; do sleep 3600; done
      "
    networks:
      - tyra-network

volumes:
  nginx_logs:
    name: tyra_nginx_logs
  neo4j_data:
    name: tyra_neo4j_data
  neo4j_logs:
    name: tyra_neo4j_logs
  neo4j_conf:
    name: tyra_neo4j_conf
  neo4j_plugins:
    name: tyra_neo4j_plugins

# =============================================================================
# Production-specific network configuration
# =============================================================================
networks:
  tyra-network:
    driver: bridge
    name: tyra-network-prod
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1